# -*- coding: utf-8 -*-

from openerp import models, fields, api

class test_candidat(models.Model):
     #_name = 'test_candidat.test_candidat'
    #_inherits={'res.users':'user_id'}*
     _inherit='res.partner'

     #name = fields.Char()
     #applicant=fields.One2many('test_applicant.test_applicant','candidate_id',string='applicants')
     #cv=fields.Binary('upload cv')
     #user_id=fields.Many2one('res.users', required=True,string='Related User', ondelete='restrict',help='user-related data of the candidate', auto_join=True)
     #login=fields.Char('Login', size=64, required=True,help="Used to log into the system")
     #password=fields.Char('Password', size=64, invisible=True, copy=False,help="Keep empty if you don't want the user to be able to connect on the system.")
     """new_password=fields.function(_get_password, type='char', size=64,fnct_inv=_set_new_password, string='Set Password',help="Specify a value only when creating a user or if you're "\
     	"changing the user's password, otherwise leave empty. After "\
                 "a change of password, the user has to login again.")"""
     candidat=fields.Boolean('Candidat')


     """def create(self, cr, uid, vals, context=None):
        user_id = super(test_candidat, self).create(cr, uid, vals, context=context)
        user = self.browse(cr, uid, user_id, context=context)

        return user_id



   	 def write(self, cr, uid, ids, values, context=None):
        if not hasattr(ids, '__iter__'):
            ids = [ids]
        if values.get('active') == False:
            for current_id in ids:
                if current_id == SUPERUSER_ID:
                    raise UserError(_("You cannot unactivate the admin user."))
                elif current_id == uid:
                    raise UserError(_("You cannot unactivate the user you're currently logged in as."))
        if ids == [uid]:
            for key in values.keys():
                if not (key in self.SELF_WRITEABLE_FIELDS or key.startswith('context_')):
                    break
            else:
                uid = 1 # safe fields only, so we write as super-user to bypass access rights
        res = super(test_candidat.test_candidat, self).write(cr, uid, ids, values, context=context)
        # clear caches linked to the users
        self.pool['ir.model.access'].call_cache_clearing_methods(cr)
        clear = partial(self.pool['ir.rule'].clear_cache, cr)
        map(clear, ids)
        db = cr.dbname
        if db in self.__uid_cache:
            for id in ids:
                if id in self.__uid_cache[db]:
                    del self.__uid_cache[db][id]
        self.context_get.clear_cache(self)
        self.has_group.clear_cache(self)
        return res


     SELF_WRITEABLE_FIELDS = ['password', 'email', 'name','active','cv']
     __uid_cache = {}

     def on_change_login(self, cr, uid, ids, login, context=None):
        if login and tools.single_email_re.match(login):
            return {'value': {'email': login}}
        return {}

     def _set_new_password(self, cr, uid, id, name, value, args, context=None):
        if value is False:
            # Do not update the password if no value is provided, ignore silently.
            # For example web client submits False values for all empty fields.
            return
        if uid == id:
            # To change their own password users must use the client-specific change password wizard,
            # so that the new password is immediately used for further RPC requests, otherwise the user
            # will face unexpected 'Access Denied' exceptions.
            raise UserError(_('Please use the change password wizard (in User Preferences or User menu) to change your own password.'))
        self.write(cr, uid, id, {'password': value})
     
     def _get_password(self, cr, uid, ids, arg, karg, context=None):
        return dict.fromkeys(ids, '')

     

     def create(self, cr, uid, vals, context=None):
        user_id = super(test_candidat.test_candidat, self).create(cr, uid, vals, context=context)
        user = self.browse(cr, uid, user_id, context=context)
 
       if user.partner_id.company_id: 
            user.partner_id.write({'company_id': user.company_id.id})
        return user_id
     

     def write(self, cr, uid, ids, values, context=None):
        if not hasattr(ids, '__iter__'):
            ids = [ids]
        if values.get('active') == False:
            for current_id in ids:
                if current_id == SUPERUSER_ID:
                    raise UserError(_("You cannot unactivate the admin user."))
                elif current_id == uid:
                    raise UserError(_("You cannot unactivate the user you're currently logged in as."))
        if ids == [uid]:
            for key in values.keys():
                if not (key in self.SELF_WRITEABLE_FIELDS or key.startswith('context_')):
                    break
            
        res = super(test_candidat.test_candidat, self).write(cr, uid, ids, values, context=context)
        
        # clear caches linked to the users
        self.pool['ir.model.access'].call_cache_clearing_methods(cr)
        clear = partial(self.pool['ir.rule'].clear_cache, cr)
        map(clear, ids)
        db = cr.dbname
        if db in self.__uid_cache:
            for id in ids:
                if id in self.__uid_cache[db]:
                    del self.__uid_cache[db][id]
        self.context_get.clear_cache(self)
        #self.has_group.clear_cache(self)
        return res

     @tools.ormcache('uid')
     def context_get(self, cr, uid, context=None):
        user = self.browse(cr, SUPERUSER_ID, uid, context)
        result = {}
        for k in self._fields:
            if k.startswith('context_'):
                context_key = k[8:]
            else:
                context_key = False
            if context_key:
                res = getattr(user, k) or False
                if isinstance(res, models.BaseModel):
                    res = res.id
                result[context_key] = res or False
        return result"""
